#Step 1 is to import the library
from psmiles import PolymerSmiles as PS #So, the whole statement from psmiles import PolymerSmiles, which is a class within this package and likely provides functionalities specific to handling and manipulating polymer SMILES strings as PS imports the PolymerSmiles class from the psmiles package and allows us to refer to it as PS in our code. This can make our code cleaner, especially if we are going to use PolymerSmiles multiple times.
#Step 2 is to define the two monomers
ps1 = PS("[*]C=C[*]") #create a variable for the first monomer and define it from the PS class
#print (ps1) #print it to see if everything is working till now.
ps2 = PS("[*]CC(C)[*]") # create the second variable and define the second monomer from the PS class.
#print (ps2)
#Srep 3 is the creation of the random copolymers from the defined monomers
import random #This line imports Python's built-in random module, which contains functions for generating random numbers and making random selections.
random.seed(10) # This line initializes the random number generator with a seed value of 10. Providing a seed value ensures that the sequence of random numbers and selections generated by the random module is reproducible. In other words, every time you run your code with the same seed, the random module will produce the same sequence of outputs, which is useful for debugging or when you want consistent results during development and testing.
first_random_copolymer= ps1.random_copolymer(ps2, units=10, ratio=0.7)
# This line calling a method random_copolymer on  ps1, The method generates a random copolymer based on the provided parameters .Units=10 specifies the total number of monomer units in the resulting copolymer. In this case, the copolymer will consist of 10 monomer units in total. ratio=0.7 specifies the ratio of the first monomer (ps1) to the second monomer (ps2) in the copolymer. A ratio of 0.7 suggests that 70% of the copolymer's units will be of the type represented by ps1, and the remaining 30% will be of the type represented by ps2. There was a small problem here in the code provided in the documentation of this group as the code was written with wrong defining of ps2 , it was written ps only.
print (first_random_copolymer) # Print the SMILES representation of the first random copolymer
#Step 4 creation of the 100 random copolymers all at once
all_copolymers = [] # Initialize an empty list to store the copolymers
# Set a random seed for reproducibility 
random.seed(10) #make sure that your polymers are reproducable.
# Loop to generate 100 random copolymers
for _ in range(100):
    # Generate a random copolymer
    copolymer = ps1.random_copolymer(ps2, units=10, ratio=0.7)
    
    # Append the generated copolymer to the list
    all_copolymers.append(copolymer)
#print (all_copolymers [22]) # to print the 23 element in you copolymers, make sure to take the print statement out of your loop.
    #print (all_copolymers)
# Loop through all copolymers and print each with a count
# for count, copolymer in enumerate(all_copolymers, start=1):
#     print(f"{count}: {copolymer}")
#Computation of polyBert, # Step 1: Initialize an empty list for fingerprints
polybert_fingerprints = []
# Step 2 & 3: Loop through each copolymer and compute its fingerprint
for copolymer in all_copolymers:
    fingerprint = copolymer.fingerprint("polyBERT")  # Compute fingerprint
    polybert_fingerprints.append(fingerprint)  # Step 4: Append to the list
# Step 5: Print the fingerprints
#for fp in polybert_fingerprints:
    #print(fp)
print (polybert_fingerprints [22]) #print the PolyBert fingerprint of a specific copolymer in my list
#Computation of Circular (Morgen) fingerprint
morgan_fingerprints = [] # Initialize an empty list for Morgan fingerprints
for copolymer in all_copolymers: # Loop through each copolymer in the all_copolymers list
    fingerprint = copolymer.fingerprint("ci") # compute fingerprint. if you want to know how many fingerprints do you have and how to apply it, just replace the word "copolymer" in this line in copolymer.fingerprint with "PS" to be PS.fingerprint, then stop with your cursor on it, and it will show you the functions available and how to insert them correctly. Otherwise, refer to the documentation of psmiles and open the source code, through psmiles then click on the source code link.
    morgan_fingerprints.append(fingerprint) # Append the computed fingerprint to the morgan_fingerprints list
# Example: Print the 23rd fingerprint
print(morgan_fingerprints[80])
#morgan_fingerprints = [copolymer.fingerprint("ci") for copolymer in all_copolymers] #One line to write the previous three lines,which uses a list comprehension to apply the fingerprint method with the "ci" argument to each copolymer in your list all_copolymers and collects all the computed fingerprints into the list ci_fingerprints

      
   


